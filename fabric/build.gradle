plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    runConfigs.configureEach {
        if (name == "client") {
            runDir = "../run"

            if(System.getenv('MC_USERNAME') && System.getenv('MC_UUID') && System.getenv('MC_ACCESS_TOKEN')) {
                programArgs '--username', System.getenv('MC_USERNAME'), '--uuid', System.getenv('MC_UUID'), '--accessToken', System.getenv('MC_ACCESS_TOKEN')
            }
        } else if (name == "server")
            runDir = "../run/server-fabric"
    }
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    modApi ("net.threetag:Palladium-fabric:${rootProject.palladium_version}", {
        exclude group: "com.github.Virtuoel"
    })
//    modApi "net.threetag:PalladiumCore-fabric:${rootProject.palladiumcore_version}"

    // JEI
    modCompileOnlyApi "mezz.jei:jei-${rootProject.minecraft_version}-fabric-api:${rootProject.jei_version}"
    modRuntimeOnly "mezz.jei:jei-${rootProject.minecraft_version}-fabric:${rootProject.jei_version}"

    // REI
    modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${rootProject.rei_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", rootProject.mod_version

    filesMatching("fabric.mod.json") {
        expand "version": rootProject.mod_version
    }
}

sourceSets.main.resources {
    srcDir project(":forge").file("src/generated/resources").absolutePath
    exclude '**/data/theloststones/**/forge/*'
    exclude '**/data/curios/*'
}

shadowJar {
    exclude "theloststones.accesswidener"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
    archiveClassifier = 'fabric'
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenCommon(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }
}
